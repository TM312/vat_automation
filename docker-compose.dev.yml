version: '3'

services:

    # front:
    #     build:
    #         context: ./front
    #         dockerfile: Dockerfile.dev
    #         args:
    #             - NODE_VERSION=${NODE_VERSION}
    #     volumes:
    #           - ./front/:/home/app
    #     command: "npm run dev"

    # front_admin:
    #     build:
    #         context: ./front_admin
    #         dockerfile: Dockerfile.dev
    #         args:
    #             - NODE_VERSION=${NODE_VERSION}
    #     volumes:
    #           - ./front_admin/:/home/app
    #     command: "npm run dev"

    front_tax:
        build:
            context: ./front_tax
            dockerfile: Dockerfile.dev
            args:
                - NODE_VERSION=${NODE_VERSION}
        volumes:
              - ./front_tax/:/home/app
        command: "npm run dev"

    proxy:
        container_name: proxy
        build:
            context: ./nginx
            dockerfile: Dockerfile
            args:
                - NGINX_VERSION=${NGINX_VERSION}
                - ENVIRONMENT=dev
        image: ${OWNER_NAME}/proxy:${VERSION_NUMBER}
        restart: unless-stopped
        # volumes:
        #       - media_data:/var/lib/media_data:ro
        ports:
            - 5000:5000
            - 22406:22406
            - 31729:31729
            - 80:80
        networks:
            - web
        depends_on:
            - api

        command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
        # improved version based on: https://stackoverflow.com/questions/57554703/why-use-nginx-with-daemon-off-in-background-with-docker
        #command: '/bin/sh -c ''while :; do sleep 6h; nginx -s reload; done & exec nginx -g "daemon off;"'''


    rabbitmq:
        env_file:
            - .dev.env

    redis:
        env_file:
            - .dev.env

    celery-worker:
        env_file:
            - .dev.env

    # celery-beat:
    #     env_file:
    #         - .dev.env

    # flower:
    #     ports:
    #         - 8888:8888

    #     env_file:
    #         - .dev.env





    api:
        volumes:
              - ./api/migrations/:/home/api/migrations
              - ./api/logs/:/home/logs
            #   - ./api/seeds:/home/seeds
        env_file:
            - .dev.env
        #command: bash -c "./wait-for-it.sh postgres:5432 --timeout=2 && flask run --host 0.0.0.0 --port 5000"



    postgres:
        # volumes:
        #     - pgdata_dev:/pgdata
        environment:
            - DATABASE=postgres
        ports:
            - 5432:5432
        env_file:
            - .dev.env

# volumes:
#     pgdata_dev:
