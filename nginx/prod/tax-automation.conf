#### TEMPORARY SOLUTION
upstream nuxt {
    server nuxt:80;
}

upstream api {
    server api:80;
}

server {
    listen 80;
    listen [::]:80;
    server_name tax-automation.com www.tax-automation.com;
    server_tokens off;
    #disables emitting nginx version on error pages


    location / {
                                            # every request made / on port 80 will be passed to the api server
        proxy_pass                          http://nuxt;
        proxy_http_version	                1.1;
        proxy_cache_bypass	                $http_upgrade;
        proxy_buffering                     off;

        #The proxy headers and other options you see here are just performance optimizations and forwarded headers.
        proxy_set_header Upgrade			$http_upgrade;
        proxy_set_header Connection 		'upgrade';
        proxy_set_header Host				$host;
        proxy_set_header X-Real-IP			$remote_addr;
        proxy_set_header X-Forwarded-For	$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto	$scheme;
        proxy_set_header X-Forwarded-Host	$host;
        proxy_set_header X-Forwarded-Port	$server_port;
    }

}

server {
    listen 80;
    listen [::]:80;
    server_name api.tax-automation.com;
    #Sets names of a virtual server
    server_tokens off;
    #disables emitting nginx version on error pages

    location / {
                                            # every request made to /api on port 5000 will be passed to the api server
        proxy_pass                          http://api;
        proxy_http_version                  1.1;
        proxy_cache_bypass                  $http_upgrade;
        proxy_buffering                     off;

        proxy_set_header Upgrade            $http_upgrade;
        proxy_set_header Connection         keep-alive;
        proxy_set_header Host               $host;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
    }
}





# # This is the nginx config file that contains the reverse proxy routes.
# # Proxy Server: a server that receives requests, passes them to the proxied servers, retrieves responses from them, and sends them to the clients.

# # The upstream context is used to define and configure “upstream” servers. Basically, this context defines a named pool of servers that Nginx can then proxy requests to.

# # the upstream is named nuxt
# upstream nuxt {
#     # maps the docker-compose services' 1) names (i.e. nuxt, api) and 2) exposed ports
#     #server <service_name> : <port>
#     server nuxt:80;
# }

# upstream api {
#     server api:80;
# }

# # Server defines the address and other parameters of a server. The address can be specified as a domain name or IP address, with an optional port
# # The reason for allowing multiple declarations of the server context is that each instance defines a specific virtual server to handle client requests.
# # You can have as many server blocks as you need, each of which can handle a specific subset of connections.
# # The directives which decide if a server block will be used to answer a request are: listen & server_name
# # if multiple servers listen to the same port, nginx tests only the request’s header field “Host” to determine which server the request should be routed to.
# # If 'Host header field' does not match any server name, or the request does not contain this header field at all, then nginx will route the request to the default server for this port.
# # the standard default server would be the first one if not specified differently
# server {
#     listen 80;
#     listen [::]:80;
#     server_name tax-automation.com www.tax-automation.com;
#     server_tokens off;

#     # Location contexts share many relational qualities with server contexts. For example, multiple location contexts can be defined, each location is used to handle a certain type of client requests.
#     # Syntax: location /match/criteria
#     # Example: So, if a client requests http://www.example.com/blog on port 80, the http, www.example.com, and port 80 would all be used to determine which server block to select.
#     #          After a server is selected, the /blog portion (the request URI), would be evaluated against the defined locations to determine which further context should be used to respond to the request.
#     location /.well-known/acme-challenge/ {
#         # this location is for certbot renewal
#         # 'root' indicates: serves data from the dir on the server specified below
#         root /var/www/certbot;
#     }
#     # Whenever someone tries to connect to the app or api on non-secure http, she will be 301 redirected to https.
#     location / {
#         return 301 https://tax-automation.com$request_uri;
#     }
#     # return 444; cfr. https://docs.gunicorn.org/en/stable/deploy.html
# }

# #cfr here: https://medium.com/@pentacent/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71
# server {
#     listen 80;
#     listen [::]:80;
#     server_name api.tax-automation.com;
#     #Sets names of a virtual server
#     server_tokens off;
#     #disables emitting nginx version on error pages

#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#         #Sets configuration depending on a request URI.
#     }

#     location / {
#         return 301 https://$host$request_uri;
#     }
# }

# server {
#     listen 443 ssl http2;
#     # all connections accepted on this port should work in SSL or http2
#     listen [::]:443 ssl http2;
#     #IPv6 addresses; Port 443 official purpose: Hypertext Transfer Protocol over TLS/SSL (HTTPS)[10]
#     server_name www.tax-automation.com;
#     server_tokens off;
#     proxy_ssl_server_name on;
#     #Enables passing of the server name through TLS Server Name Indication extension (SNI, RFC 6066) when establishing a connection with the proxied HTTPS server.

#     ssl_certificate /etc/letsencrypt/live/www.tax-automation.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/www.tax-automation.com/privkey.pem;
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:SSL:50m;
#     ssl_session_tickets off;

#     # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#     # intermediate configuration. tweak to your needs.
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;

#     # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
#     add_header Strict-Transport-Security "max-age=63072000" always;

#     # OCSP Stapling ---
#     # fetch OCSP records from URL in ssl_certificate and cache them
#     ssl_stapling on;
#     ssl_stapling_verify on;

#     ## verify chain of trust of OCSP response using Root CA and Intermediate certs
#     ssl_trusted_certificate /etc/letsencrypt/live/www.tax-automation.com/fullchain.pem;

#   	resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s; # Cloudflare
#   	resolver_timeout 5s;

#     location / {
#         return 301 https://tax-automation.com$request_uri;
#     }
# }

# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name tax-automation.com;
#     server_tokens off;
#     proxy_ssl_server_name on;

#     ssl_certificate /etc/letsencrypt/live/tax-automation.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/tax-automation.com/privkey.pem;
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:SSL:50m;
#     ssl_session_tickets off;

#     # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#     # intermediate configuration. tweak to your needs.
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;

#     # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
#     add_header Strict-Transport-Security "max-age=63072000" always;

#     # OCSP Stapling ---
#     # fetch OCSP records from URL in ssl_certificate and cache them
#     ssl_stapling on;
#     ssl_stapling_verify on;

#     ## verify chain of trust of OCSP response using Root CA and Intermediate certs
#     ssl_trusted_certificate /etc/letsencrypt/live/tax-automation.com/fullchain.pem;

#     # Cloudflare setup: https://developers.cloudflare.com/1.1.1.1/setting-up-1.1.1.1/
#     # Explanation of resolver: https://developers.cloudflare.com/1.1.1.1/what-is-1.1.1.1/
#   	resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s;
#   	resolver_timeout 5s;

#     location / {
#         proxy_pass                          http://nuxt;
#         proxy_http_version	                1.1;
#         proxy_cache_bypass	                $http_upgrade;
#         proxy_buffering                     off;

#         #The proxy headers and other options you see here are just performance optimizations and forwarded headers.
#         proxy_set_header Upgrade			$http_upgrade;
#         proxy_set_header Connection 		'upgrade';
#         proxy_set_header Host				$host;
#         proxy_set_header X-Real-IP			$remote_addr;
#         proxy_set_header X-Forwarded-For	$proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto	$scheme;
#         proxy_set_header X-Forwarded-Host	$host;
#         proxy_set_header X-Forwarded-Port	$server_port;
#     }
# }
# # If a block directive can have other directives inside braces, it is called a context (examples: events, http, server, and location).
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name api.tax-automation.com;
#     server_tokens off;
#     proxy_ssl_server_name on;

#     ssl_certificate /etc/letsencrypt/live/api.tax-automation.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/api.tax-automation.com/privkey.pem;
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:SSL:50m;
#     ssl_session_tickets off;

#     # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#     # intermediate configuration. tweak to your needs.
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;

#     # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
#     add_header Strict-Transport-Security "max-age=63072000" always;

#     # OCSP Stapling ---
#     # fetch OCSP records from URL in ssl_certificate and cache them
#     ssl_stapling on;
#     ssl_stapling_verify on;

#     ## verify chain of trust of OCSP response using Root CA and Intermediate certs
#     ssl_trusted_certificate /etc/letsencrypt/live/api.tax-automation.com/fullchain.pem;

#   	resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s; # Cloudflare
#   	resolver_timeout 5s;

#     location / {
#         proxy_pass                          http://api;
#         proxy_http_version                  1.1;
#         proxy_cache_bypass                  $http_upgrade;
#         proxy_buffering                     off;

#         proxy_set_header Upgrade            $http_upgrade;
#         proxy_set_header Connection         keep-alive;
#         proxy_set_header Host               $host;
#         proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto  $scheme;
#     }
# }
