version: '3'

services:
    proxy:
        container_name: proxy
        build:
            context: ./nginx
            dockerfile: Dockerfile
            args:
                - NGINX_VERSION=${NGINX_VERSION}
        image: ${OWNER_NAME}/proxy:${VERSION_NUMBER}
        restart: unless-stopped
        ports:
            - 80:80
            # - 443:443
        volumes:
            - ./nginx/prod:/etc/nginx/conf.d
            # - ./nginx/prod/certbot/conf:/etc/letsencrypt
            # - ./nginx/prod/certbot/www:/var/www/certbot
        depends_on:
            - api
        networks:
            - web
        #command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
        # improved version based on: https://stackoverflow.com/questions/57554703/why-use-nginx-with-daemon-off-in-background-with-docker
        command: '/bin/sh -c ''while :; do sleep 6h; nginx -s reload; done & exec nginx -g "daemon off;"'

    # certbot:
    #     # container_name: certbot
    #     image: certbot/certbot
    #     restart: unless-stopped
    #     volumes:
    #         - ./nginx/prod/certbot/conf:/etc/letsencrypt
    #         - ./nginx/prod/certbot/www:/var/www/certbot
    #     networks:
    #         - web
    #     #command: certonly --webroot --webroot-path=/var/www/html --email no-reply@tax-automation.com --agree-tos --no-eff-email --staging -d tax-automation.com  -d www.tax-automation.com -d api.tax-automation.com
    #     entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

    api:
        env_file:
            - .prod.env

    nuxt:
        env_file:
            - .prod.env

networks:
    internal:
    web:
        # external:
        #     name: nginx_web
